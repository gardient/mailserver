#!/usr/bin/env bash

#######################################
#
# This script is both a bootstrapper and the install script
# it can be downloaded with curl and piped into bash to bootstrap the entire thing
# it will ask for root privileges if that's not given
# recommendation is to straight up run it as root
#
# curl -sSL https://github.com/gardient/mailserver/raw/main/install | bash
# or
# sudo bash -c 'curl -sSL https://github.com/gardient/mailserver/raw/main/install | bash'
#
#######################################

set -a
term_rst='\e[0m'
term_err='\e[0;31m'
term_suc='\e[0;32m'
term_wrn='\e[0;33m'
term_inf='\e[0;94m'
set +a

__print() {
    echo -e "$1$2${term_rst}"
}

_ensure_defaults() {
    set -a
    if [[ -z "$MAILSRV_INSTALL_GIT_REMOTE" ]]; then
        MAILSRV_INSTALL_GIT_REMOTE="https://github.com/gardient/mailserver.git"
    fi
    export MAILSRV_FQDN

    if [[ -z "$MAILSRV_INSTALL_DIR" ]]; then
        if [[ "$EUID" = "0" ]]; then
            MAILSRV_INSTALL_DIR="/root/mailserver"
        else
            MAILSRV_INSTALL_DIR="$HOME/mailserver"
        fi
    fi

    INSTALLER_REPO="$MAILSRV_INSTALL_DIR/repo"
    INSTALLER_UTILS="$INSTALLER_REPO/utils"
    INSTALLER_TMP="$MAILSRV_INSTALL_DIR/tmp"
    INSTALLER_DATA="$MAILSRV_INSTALL_DIR/installdata"
    set +a
}

__ensure_directory_exists() {
    if [[ ! -d "$1" ]]; then
        mkdir "$1"
    fi
}

_ensure_installer_directories() {
    __ensure_directory_exists $MAILSRV_INSTALL_DIR
    rm -rfv $INSTALLER_TMP > $output
    __ensure_directory_exists $INSTALLER_TMP
    __ensure_directory_exists $INSTALLER_DATA
    chmod 700 "$INSTALLER_DATA"
}

_ensure_installer_dependencies() {
    __print $term_inf ">> installing installer dependencies <<"
    if [[ ! "$EUID" = "0" ]]; then
        if [[ -n "$DEBUG" ]]; then
            __print $term_wrn ">> you are in debug mode, and not root... skipping <<"
            __print "hope you know what you're doing"
        else
            __print $term_wrn ">> you are not root <<"

            installed_count=$(apt list --installed 2>/dev/null | egrep '^(git|jq|curl|wget|pwgen)/' | wc -l)
            if [[ installed_count -eq 5 ]]; then
                __print $term_inf "you have all dependencies installed... continuing"
            else
                __print $term_err "you are missing some dependencies"
                __print $term_wrn "\ttry: sudo apt-get install -y git jq curl wget pwgen"
            fi
        fi
    else
        apt-get install -y git jq curl wget pwgen
    fi
}

executed() {
    cd "$INSTALLER_REPO"
    if [[ ! "$EUID" = "0" && -z "$DEBUG" ]]; then
        __print $term_wrn ">> you need to execute this script as root <<"
        __print $term_wrn "\ttry: sudo ${BASH_SOURCE[0]}"
        exit 1
    else
        _ensure_installer_dependencies
        run-parts -v -- "$INSTALLER_REPO/install.d"
    fi
}

piped() {
    _ensure_installer_dependencies
    _piped_getdata
    if [[ ! "$EUID" = "0" ]]; then
        # if not root only get the repository
        __print $term_wrn ">> installer downloaded <<\nyou will need root to execute it\n\trun: sudo \"$INSTALLER_REPO/install\""
        exit 0
    else
        cd "$INSTALLER_REPO"
        exec </dev/tty >/dev/tty # bloody hack to get back terminal IO in the pipe
        ./install
        exit # we actually have to do this otherwhise it just hangs
    fi
}

_piped_getdata() {
    __print $term_wrn "clearing repo directory"
    rm -rf "$INSTALLER_REPO"
    if [[ -n "$MAILSRV_INSTALL_USE_BRANCH" ]]; then
        echo ">> git clone --dept 1 -b \"$MAILSRV_INSTALL_USE_BRANCH\" \"$MAILSRV_INSTALL_GIT_REMOTE\" \"$INSTALLER_REPO\""
        git clone --dept 1 -b "$MAILSRV_INSTALL_USE_BRANCH" "$MAILSRV_INSTALL_GIT_REMOTE" "$INSTALLER_REPO"
    elif [[ -n "$MAILSRV_INSTALL_USE_TAG" ]]; then
        echo ">> git clone --dept 1 -b \"$MAILSRV_INSTALL_USE_TAG\" \"$MAILSRV_INSTALL_GIT_REMOTE\" \"$INSTALLER_REPO\""
        git clone --dept 1 -b "$MAILSRV_INSTALL_USE_TAG" "$MAILSRV_INSTALL_GIT_REMOTE" "$INSTALLER_REPO"
    else
        echo "getting the newest release"
        latest_tag=$(curl -sSL https://api.github.com/repos/gardient/mailserver/releases | jq '.[0].tag_name')
        if [[ ! "$latest_tag" = "null" ]]; then
            git clone --dept 1 -b "$latest_tag" "$MAILSRV_INSTALL_GIT_REMOTE" "$INSTALLER_REPO"
        else
            # if there are no releases, clone the default branch
            git clone --dept 1 "$MAILSRV_INSTALL_GIT_REMOTE" "$INSTALLER_REPO"
        fi
    fi

    echo "making sure everything that should be executable is executable"
    pushd "$INSTALLER_REPO" > $output
    fgrep -lir '#!/usr/bin/env bash' . | xargs chmod u+x
    popd > $output
}

export output=/dev/null
if [[ -n "$DEBUG" ]]; then
    export output=/dev/stdout
fi

_ensure_defaults
_ensure_installer_directories

if [[ -n "${BASH_SOURCE[0]}" ]]; then
	if [[ "${BASH_SOURCE[0]}" == "$0" ]]; then
		executed
	else
		echo 'why would you source this?' >2
        exit 2
	fi
else
	piped
fi
